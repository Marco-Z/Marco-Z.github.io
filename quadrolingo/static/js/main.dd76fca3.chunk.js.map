{"version":3,"sources":["components/Flag/index.tsx","components/Card/index.tsx","resources/countries.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["style","borderRadius","backgroundColor","width","height","position","bottom","right","overflow","Flag","_ref","country","size","type","react","Object","objectSpread","background","concat","backgroundSize","color","padding","boxSizing","flex","textAlign","display","flexDirection","justifyContent","margin","Card","props","word","description","fontSize","fontWeight","components_Flag","flag","countries","countryName","countryCodes","language","getCountry","find","el","API_KEY","config","mainCountry","translations","translationsStyle","randomWord","words","toConsumableArray","WordOfTheDay","Math","floor","random","length","translate","to","url","fetch","then","res","json","asyncToGenerator","regenerator_default","a","mark","_callee3","j","translation","wrap","_context3","prev","next","text","getPinyin","sent","abrupt","stop","_x","apply","this","arguments","catch","err","console","log","data","App","state","translationPromises","map","Promise","all","setState","setTimeout","_this2","init","_this$state","react_default","createElement","components_Card","t","key","React","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dd76fca3.chunk.js","sourcesContent":["import * as React from 'react'\n\nconst style = {\n    borderRadius: '50%',\n    backgroundColor: 'red',\n    width: '3em',\n    height: '3em',\n    position: 'absolute',\n    bottom: '1em',\n    right: '1em',\n    overflow: 'hidden',\n  } as React.CSSProperties\n  \ninterface Props {\n    country: string\n    size?: number\n    type?: string\n}\n\nconst Flag: React.FC<Props> = ({country, size = 64, type = 'flat'}: Props) => {\n    return (\n      <div style={{...style, background: `url(https://restcountries.eu/data/${country}.svg) center center`, backgroundSize: '150%'}}>\n      </div>\n    )\n  }\n\n  export default Flag","import * as React from \"react\";\nimport Flag from '../Flag';\nimport {Country, CountryCodes} from '../../resources/countries'\n\nconst style = {\n  color: \"#ddd\",\n  backgroundColor: \"#1F2022\",\n  padding: \"1em\",\n  boxSizing: 'border-box',\n  flex: 1,\n  height: '100%',\n  textAlign: 'center',\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  position: 'relative',\n  margin: '1em',\n  borderRadius: '1em',\n} as React.CSSProperties\n\ninterface Props {\n  word: string\n  country: CountryCodes\n  description?: string\n}\n\nconst Card: React.FC<Props> = (props: Props) => {\n  const { word, country, description } = props\n  return (\n    <div style={style}>\n      <h1 style={{fontSize: '4em', margin: '.5em'}}>{word}</h1>\n      <h2 style={{fontSize: '3em', fontWeight: 'lighter', margin: 0}}>{description}</h2>\n      <Flag country={country.flag}/>\n    </div>\n  )\n}\n\nexport default Card\n","export interface CountryCodes {\n  flag: string\n  language: string\n}\n\nexport interface Country {\n  countryName: string\n  countryCodes: CountryCodes\n}\n\nconst countries: Country[] = [\n  {\n    countryName: 'China',\n    countryCodes: {\n      flag: 'chn',\n      language: 'zh'\n    }\n  },\n  {\n    countryName: 'Netherlands',\n    countryCodes: {\n      flag: 'nld',\n      language: 'nl'\n    }\n  },\n  {\n    countryName: 'England',\n    countryCodes: {\n      flag: 'gbr',\n      language: 'en'\n    }\n  },\n  {\n    countryName: 'Italy',\n    countryCodes: {\n      flag: 'ita',\n      language: 'it'\n    }\n  }\n]\n\nexport function getCountry(country: string): Country {\n    return countries.find(el => el.countryName === country)!\n}\n\nexport function getFlagCode(country: string): string | undefined {\n    return getCountry(country).countryCodes.flag\n}\n\nexport function getLanguageCode(country: string): string | undefined {\n    return getCountry(country).countryCodes.language\n}","import React, { useState } from 'react'\nimport Card from './components/Card'\nimport * as WordOfTheDay from './resources/words.json'\nimport { getCountry, CountryCodes, Country } from './resources/countries'\nimport { statement } from '@babel/template'\n\nconst API_KEY =\n  'trnsl.1.1.20190728T165615Z.247e03f7a3f59b82.b3061ece11ab261ba97323ff71f5c93a0b6ceed1'\n\nconst config = {\n  mainCountry: getCountry('England'),\n  translations: [\n    getCountry('China'),\n    getCountry('Italy'),\n    getCountry('Netherlands')\n  ]\n}\n\nconst style = {\n  height: '100%',\n  color: '#ddd',\n  backgroundColor: '#2D313A',\n  padding: '4em',\n  boxSizing: 'border-box',\n  display: 'flex',\n  flexDirection: 'column'\n} as React.CSSProperties\n\nconst translationsStyle = {\n  flex: 1,\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'center'\n} as React.CSSProperties\n\ninterface Translation {\n  word: string\n  description?: string\n  country: Country\n}\n\ninterface State {\n  word: string\n  translations: Translation[]\n}\n\nclass App extends React.PureComponent<{}, State> {\n  state = {\n    word: '',\n    translations: []\n  }\n\n  async init() {\n    const word = randomWord()\n    const translationPromises = config.translations.map(country => translate(word, country))\n    const translations = await Promise.all(translationPromises) as Translation[]\n    this.setState({ word, translations }) \n    setTimeout(() => {\n      this.init()\n    }, 1000*60*60*24)\n  }\n\nasync componentDidMount() {\n    this.init()\n  }\n\n\n  render() {\n    const { word, translations } = this.state\n    return (\n      <div style={style}>\n        <div style={{ flex: 1, padding: '10px' }}>\n          <Card word={word} country={config.mainCountry.countryCodes} />\n        </div>\n        <div style={{ ...translationsStyle, padding: '10px' }}>\n          {translations.map((t: Translation) => (\n            <Card key={t.word} word={t.word} country={t.country.countryCodes} description={t.description}/>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction randomWord(): string {\n  const words = [\n    ...WordOfTheDay.randomAdjectives,\n    ...WordOfTheDay.randomNouns,\n    ...WordOfTheDay.randomVerbs\n  ]\n  const word = words[Math.floor(Math.random() * words.length)]\n  return word\n}\n\nfunction translate(word: string, to: Country) {\n  const url = `https://translate.yandex.net/api/v1.5/tr.json/translate?key=${API_KEY}&text=${word}&lang=${\n    config.mainCountry.countryCodes.language\n  }-${to.countryCodes.language}`\n  return fetch(url)\n    .then(res => res.json())\n    .then(async (j) => {\n      const word = j.text[0]\n      let description\n\n      if(to.countryName === 'China') {\n        description = await getPinyin(word)\n      }\n      const translation = {\n        word,\n        description,\n        country: to\n      }\n      return translation\n    })\n    .catch(err => {\n      console.log(err)\n    })\n}\n\nfunction getPinyin(word: string) {\n  return fetch(`https://glosbe.com/transliteration/api?from=Han&dest=Latin&format=json&text=${word}`)\n  .then(res => res.json())\n  .then(data => data.text)\n  .catch(err => console.log(err))\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}